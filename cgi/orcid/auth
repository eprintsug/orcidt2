=begin InternalDoc

=over

=item Orcid AUTH script

=back

This is the script called by the ORCID API for the OAUTH process.
The action is encoded in the request. This is decoded and the
appropriate plugin is called to perform the necessary actions

=end InternalDoc

=cut

use HTTP::Request::Common;
use EPrints;
use strict;
my $repo = new EPrints::Session;
exit( 0 ) unless( defined $repo );

my $CODE_LEN = 6;

my $state = $repo->param( "state" );
my $code = $repo->param( "code" );
print STDERR "####### orcid auth script called with state[".$state."] code [".$code."]\n";


unless ( $code && length( $code ) == $CODE_LEN )
{
	show_error( $repo, 'invalid_code' );
	$repo->terminate;
        exit;
}
my $machine;
my $user_id;
my $item_id;
my $action;
if ( $state && $state =~ /^(\d)(\d+)-(\d{2})(\d+)/ )
{
	$machine = $1;
	$user_id = $2;
	$action  = $3;
	$item_id = $4;
print STDERR "####### orcid auth script got state machine[$machine] user_id[$user_id] item_id[$item_id] action[$action]\n";
}
else
{
print STDERR "####### orcid auth script invalid state\n";
	show_error( $repo, 'invalid_state' );
	$repo->terminate;
        exit;
}

my $target_map = $repo->config( "orcid_target_machines" );
my $host = $repo->config( "host" );
my $this_machine = $target_map->{$host};

if ( $machine != $this_machine )
{
print STDERR "####### orcid auth script invalid machine\n";
	show_error( $repo, 'invalid_machine' );
	$repo->terminate;
        exit;
}

print STDERR "\n\n####### about to exchange \n\n";
# Exchange the Authorization Code for an Access Token with the Client ID and Secret.

my $request = POST( $repo->config( "orcid_exchange_url" ), 
	[
		client_id => $repo->config( "orcid_client_id" ),
		client_secret => $repo->config( "orcid_client_secret" ),
		grant_type => "authorization_code",
		code	=>	$code, 
		redirect_uri => $repo->config( "orcid_redirect_uri" ),
	] );

$request->header( "accept" => "application/json" );

my $ua = LWP::UserAgent->new;
my $response = $ua->request($request);

print STDERR "\n\n####### got exchange response \n\n";

if (200 != $response->code)
{

print STDERR "####### orcid auth script failed to exchange\n";
	show_error( $repo, 'exchange_failed' );
	$repo->terminate;
        exit;
}

#print STDERR "####### orcid auth script got exchange response \n";
my $content = $response->content;
my $json_vars = JSON::decode_json($content);
my $token = $json_vars->{access_token};
my $token_type = $json_vars->{token_type};
my $refresh_token = $json_vars->{refresh_token};
my $expires_in = $json_vars->{expires_in};
my $r_scope = $json_vars->{scope};
my $r_orcid = $json_vars->{orcid};

#print STDERR "####### orcid auth script got exchange response token [ $token ] for action[ $action ] scope[$r_scope] orcid[$r_orcid]\n";

# we are now authenticated so we can perform the appropriate action for the scope if we have an appropriate plugin.
# default to the Auth plugin
my $plugin = $repo->plugin( "Orcid::Auth" ); 
my @plist = $repo->get_plugins( type => "Orcid", scope => $r_scope ); 
$plugin = $plist[0] if ( @plist );
my $complete = $plugin->perform_action( $r_scope, $r_orcid, $token, $action, $user_id, $item_id );

if ( $complete )
{
	$repo->terminate;
	exit;
}

print STDERR "plugin not complete so redirect and exit\n";
$repo->redirect( $repo->config( 'userhome' ) );

$repo->terminate;
exit;

=begin InternalDoc

=over

=item show_error ( $repo, $error_id )

=back

Show the error and return

=end InternalDoc

=cut

sub show_error
{
	my( $repo, $error_id ) = @_;

	my $title = $repo->html_phrase( "cgi/orcid/auth:title" );
	my $page = $repo->make_doc_fragment;
	$page->appendChild( $repo->render_message( 'error', $repo->html_phrase( "cgi/orcid/auth:error:$error_id" ) ) );

	$repo->build_page( $title, $page, "loginshib" );
	$repo->send_page();
}


